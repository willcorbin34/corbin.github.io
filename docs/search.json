[
  {
    "objectID": "quickhitters.html",
    "href": "quickhitters.html",
    "title": "Quick Hitters",
    "section": "",
    "text": "From watching the 2025 playoffs, it has felt like there have been more offensive rebounds, especially late game. I wanted to take a quick look at if the numbers follow that intuition.\n\n\nPer usual, looking at the offensive rebounding rates rather than the raw numbers indicate a more noticable difference. This is most likely due to the pace of playoff games slowing down in comparison to the regular season. Out of the teams in the conference finals, Minnesota and New York have had increased offensive rebounding rates. Oklahoma City and Indiana have had decreased rates."
  },
  {
    "objectID": "quickhitters.html#team-offensive-rebounding-rates-playoffs-vs-regular-season",
    "href": "quickhitters.html#team-offensive-rebounding-rates-playoffs-vs-regular-season",
    "title": "Quick Hitters",
    "section": "",
    "text": "From watching the 2025 playoffs, it has felt like there have been more offensive rebounds, especially late game. I wanted to take a quick look at if the numbers follow that intuition.\n\n\nPer usual, looking at the offensive rebounding rates rather than the raw numbers indicate a more noticable difference. This is most likely due to the pace of playoff games slowing down in comparison to the regular season. Out of the teams in the conference finals, Minnesota and New York have had increased offensive rebounding rates. Oklahoma City and Indiana have had decreased rates."
  },
  {
    "objectID": "quickhitters.html#point-rate-exploration-2024-2025-nba-regular-season",
    "href": "quickhitters.html#point-rate-exploration-2024-2025-nba-regular-season",
    "title": "Quick Hitters",
    "section": "3 Point Rate Exploration: 2024-2025 NBA Regular Season",
    "text": "3 Point Rate Exploration: 2024-2025 NBA Regular Season\n\n\n\n\n\nData via NBA.com."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About"
  },
  {
    "objectID": "quick_hitters/three_point_rate/3pointrate_graph.html",
    "href": "quick_hitters/three_point_rate/3pointrate_graph.html",
    "title": "Will Corbin - Analytics Portfolio",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.offsetbox import OffsetImage, AnnotationBbox\nfrom adjustText import adjust_text\n\nMatplotlib is building the font cache; this may take a moment.\n\n\n\nthree_rates_df = pd.read_csv('NBA 3 Point Rates 2024-2025.csv')\nthree_rates_df.head()\n\n\n\n\n\n\n\n\nTeam\n3PT_Rate_2025\n3PT_Rate_2024\nOff_Rtg_2025\nDef_Rtg_2025\nNet_Rtg_2025\nOff_Rtg_2024\n3PT_Def_Rate_2025\n\n\n\n\n0\nBOS\n53.6\n47.1\n119.5\n110.1\n9.4\n122.2\n41.5\n\n\n1\nGSW\n46.9\n42.5\n114.2\n111.0\n3.2\n116.9\n41.8\n\n\n2\nBKN\n45.8\n41.2\n108.1\n115.4\n-7.3\n112.4\n42.4\n\n\n3\nCLE\n45.7\n42.2\n121.0\n111.8\n9.2\n114.7\n41.3\n\n\n4\nCHI\n45.7\n35.8\n113.2\n114.8\n-1.6\n114.0\n41.7\n\n\n\n\n\n\n\n\natl_test = three_rates_df[three_rates_df['Team'] == 'ATL']\natl_test.head()\n\n\n\n\n\n\n\n\nTeam\n3PT_Rate_2025\n3PT_Rate_2024\nOff_Rtg_2025\nDef_Rtg_2025\nNet_Rtg_2025\nOff_Rtg_2024\n3PT_Def_Rate_2025\n\n\n\n\n18\nATL\n41.0\n40.8\n113.7\n114.8\n-1.1\n116.4\n41.9\n\n\n\n\n\n\n\n\natl_test['Logo'] = ['ATL']\n\n/var/folders/3b/fsnqd8hj7y74xsbt20zbpdf80000gn/T/ipykernel_44248/2031218394.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  atl_test['Logo'] = ['ATL']\n\n\n\natl_test.head()\n\n\n\n\n\n\n\n\nTeam\n3PT_Rate_2025\n3PT_Rate_2024\nOff_Rtg_2025\nDef_Rtg_2025\nNet_Rtg_2025\nOff_Rtg_2024\n3PT_Def_Rate_2025\nLogo\n\n\n\n\n18\nATL\n41.0\n40.8\n113.7\n114.8\n-1.1\n116.4\n41.9\nATL\n\n\n\n\n\n\n\n\ndef getImage(path):\n    return OffsetImage(plt.imread(f\"../logos/{path}.png\"), zoom=.05, alpha = 1)\n\n\nfig, ax = plt.subplots()\n\nax.scatter(atl_test['3PT_Rate_2025'], atl_test['Off_Rtg_2025'])\n\nfor index, row in atl_test.iterrows():\n    ab = AnnotationBbox(getImage(row['Team']), (row['3PT_Rate_2025'], row['Off_Rtg_2025']), frameon=False)\n    ax.add_artist(ab)\n    \n\nfig.suptitle(\"3 Point Rates vs Offensive Rating\", fontsize=16)\n\nax.set_title(\"2024-2025 NBA Regular Season\")\nax.set_xlabel('Offensive 3 Point Rate')\nax.set_ylabel('Offensive Rating')\n\nplt.show()\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(8,6))\n\nx = three_rates_df['3PT_Rate_2025']\ny = three_rates_df['Off_Rtg_2025']\n\nax.scatter(x, y, alpha=0)\n\n#texts = []\n#for x, y, s in zip(x, y, texts):\n#    plt.text(x, y, ha='center', va='center', fontsize=12)\n#    texts.append(plt.text(x, y, ha='center', va='center', fontsize=12))\n\nlabels = three_rates_df['Team']\ntexts = []\nfor i, label in enumerate(labels):\n    texts.append(ax.text(x[i], y[i], label, ha='center', va='center', fontsize=10))\n    #plt.annotate(label, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,5), ha='center')\n\nfig.suptitle(\"3 Point Rates vs Offensive Rating\", fontsize=16)\nax.set_title(\"2024-2025 NBA Regular Season\")\nax.set_xlabel('Offensive 3 Point Rate')\nax.set_ylabel('Offensive Rating')\n\nadjust_text(texts, only_move={'points':'y', 'texts':'y'})\nplt.style.use(\"../analytics_matplot.mplstyle\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(8,6))\n\ny = three_rates_df['3PT_Rate_2025']\nx = three_rates_df['Off_Rtg_2025']\n\nax.scatter(x, y, alpha=0)\n\n#texts = []\n#for x, y, s in zip(x, y, texts):\n#    plt.text(x, y, ha='center', va='center', fontsize=12)\n#    texts.append(plt.text(x, y, ha='center', va='center', fontsize=12))\n\nlabels = three_rates_df['Team']\ntexts = []\nfor i, label in enumerate(labels):\n    texts.append(ax.text(x[i], y[i], label, ha='center', va='center', fontsize=10))\n    #plt.annotate(label, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,5), ha='center')\n\nfig.suptitle(\"3 Point Rates vs Offensive Rating\", fontsize=16)\nax.set_title(\"2024-2025 NBA Regular Season\")\nax.set_xlabel('Offensive Rating')\nax.set_ylabel('Offensive 3 Point Rate')\n\nadjust_text(texts, only_move={'points':'y', 'texts':'y'})\nplt.style.use(\"../analytics_matplot.mplstyle\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(8,6))\n\nx = three_rates_df['3PT_Rate_2025']\ny = three_rates_df['3PT_Def_Rate_2025']\n\nax.scatter(x, y, alpha=0)\n\n#y=x line\nlims = [\n    np.min([ax.get_xlim(), ax.get_ylim()]),  # min of both axes\n    np.max([ax.get_xlim(), ax.get_ylim()]),  # max of both axes\n]\nax.plot(lims, lims, 'k-', alpha=0.75, zorder=0)\n\n#texts = []\n#for x, y, s in zip(x, y, texts):\n#    plt.text(x, y, ha='center', va='center', fontsize=12)\n#    texts.append(plt.text(x, y, ha='center', va='center', fontsize=12))\n\nlabels = three_rates_df['Team']\ntexts = []\nfor i, label in enumerate(labels):\n    texts.append(ax.text(x[i], y[i], label, ha='center', va='center', fontsize=10))\n    #plt.annotate(label, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,5), ha='center')\n\nax.invert_yaxis()\n\nfig.suptitle(\"Shooting the 3 vs Taking Away the 3\", fontsize=16)\nax.set_title(\"2024-2025 NBA Regular Season\")\nax.set_xlabel('Offensive 3 Point Rate')\nax.set_ylabel('Defensive 3 Point Rate')\n\nadjust_text(texts, only_move={'points':'y', 'texts':'y'})\nplt.style.use(\"../analytics_matplot.mplstyle\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(8,6))\n\nthree_rates_df['3PT_Rate_Diff_2025'] = three_rates_df['3PT_Rate_2025'] - three_rates_df['3PT_Def_Rate_2025']\nsorted_df = three_rates_df.sort_values('3PT_Rate_Diff_2025', ascending=False)\n\ny = sorted_df['3PT_Rate_Diff_2025']\nlabels = sorted_df['Team']\n\nax.bar(labels, y, color='lightsteelblue')\n\n#texts = []\n#for x, y, s in zip(x, y, texts):\n#    plt.text(x, y, ha='center', va='center', fontsize=12)\n#    texts.append(plt.text(x, y, ha='center', va='center', fontsize=12))\n\nplt.xticks(rotation=90)\nfig.suptitle(\"Shooting the 3 vs Taking Away the 3\", fontsize=16)\nax.set_title(\"Teams with the largest differences in 3PT rate in the 2024-2025 NBA regular season\")\nax.set_ylabel('Difference in Offensive 3PT Rate and Defensive 3PT Rate (%)')\nax.set_xlabel('Team')\n\nadjust_text(texts, only_move={'points':'y', 'texts':'y'})\nplt.style.use(\"../analytics_matplot.mplstyle\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(8,6))\n\nbetween_seasons = three_rates_df[['Team', '3PT_Rate_2025', '3PT_Rate_2024']]\nbetween_seasons['25_to_24_diff'] = between_seasons['3PT_Rate_2025'] - between_seasons['3PT_Rate_2024']\nsorted_between_seasons = between_seasons.sort_values('25_to_24_diff', ascending=False)\n\ny = sorted_between_seasons['25_to_24_diff']\nlabels = sorted_between_seasons['Team']\n\nax.bar(labels, y, color='lightsteelblue')\n\n#texts = []\n#for x, y, s in zip(x, y, texts):\n#    plt.text(x, y, ha='center', va='center', fontsize=12)\n#    texts.append(plt.text(x, y, ha='center', va='center', fontsize=12))\n\nplt.xticks(rotation=90)\nfig.suptitle(\"Change in Offensive 3 Point Rates\", fontsize=16)\nax.set_title(\"Between the 23-24 and 24-25 regular seasons, which teams shot more 3s?\")\nax.set_ylabel('Difference in Offensive 3PT Rate From 23-24 to 24-25 (%)')\nax.set_xlabel('Team')\n\nadjust_text(texts, only_move={'points':'y', 'texts':'y'})\nplt.style.use(\"../analytics_matplot.mplstyle\")\nplt.show()\n\n/var/folders/3b/fsnqd8hj7y74xsbt20zbpdf80000gn/T/ipykernel_2786/2431081051.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  between_seasons['25_to_24_diff'] = between_seasons['3PT_Rate_2025'] - between_seasons['3PT_Rate_2024']\n\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(8,6))\n\ny = three_rates_df['3PT_Rate_2025'] - three_rates_df['3PT_Rate_2024']\nx = three_rates_df['Off_Rtg_2025'] - three_rates_df['Off_Rtg_2024']\n\nax.scatter(x, y, alpha=0)\nax.axhline(0, color=\"black\", alpha=0.75, linestyle=\"--\")\nax.axvline(0, color=\"black\", alpha=0.75, linestyle=\"--\")\n\n#texts = []\n#for x, y, s in zip(x, y, texts):\n#    plt.text(x, y, ha='center', va='center', fontsize=12)\n#    texts.append(plt.text(x, y, ha='center', va='center', fontsize=12))\n\nlabels = three_rates_df['Team']\ntexts = []\nfor i, label in enumerate(labels):\n    texts.append(ax.text(x[i], y[i], label, ha='center', va='center', fontsize=10))\n    #plt.annotate(label, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,5), ha='center')\n    \nplt.text(5, -3, 'Better Offense, Less 3s', ha='center', va='bottom', color='cornflowerblue')   \nplt.text(5, 8, 'Better Offense, More 3s', ha='center', va='bottom', color='cornflowerblue') \nplt.text(-4, 8, 'Worse Offense, More 3s', ha='center', va='bottom', color='cornflowerblue') \nplt.text(-4, -3, 'Worse Offense, Less 3s', ha='center', va='bottom', color='cornflowerblue') \n\nfig.suptitle(\"Change in 3 Point Rates vs Change in Offensive Rating\", fontsize=16)\nax.set_title(\"Between the 23-24 and 24-25 NBA Regular Seasons\")\nax.set_xlabel('Change in Offensive Rating')\nax.set_ylabel('Change in Offensive 3 Point Rate')\n\nadjust_text(texts, only_move={'points':'y', 'texts':'y'})\nplt.style.use(\"../analytics_matplot.mplstyle\")\nplt.show()"
  },
  {
    "objectID": "projects/draft_model/draft_model_2025_writeup.html",
    "href": "projects/draft_model/draft_model_2025_writeup.html",
    "title": "2025 NBA Draft College Prospect Rating",
    "section": "",
    "text": "This prospect rating method is heavily inspired by Stephen Shea’s “College Prospect Rating 1.0” from his book Basketball Analytics: Spatial Tracking.\nThis tool is helpful in identifying players that “the analytics” favor. It can be used as another tool in evaluating NBA Draft prospects but should not be the primary method for doing so. For example, this model had Alperen Şengün as the top player in his draft class. This isn’t to say that he should’ve been the number one pick, but it may indicate that he had more value than people thought and could’ve been drafted higher than 16th."
  },
  {
    "objectID": "projects/draft_model/draft_model_2025_writeup.html#methodology",
    "href": "projects/draft_model/draft_model_2025_writeup.html#methodology",
    "title": "2025 NBA Draft College Prospect Rating",
    "section": "Methodology",
    "text": "Methodology\nThe logic behind this prospect rating system is that players tend to become more consistent over time, so we should pay more attention to their best performances rather than the games where they had an off night. Instead of taking full-season averages, we use the average of each player’s top 10 performances in many stat categories from the 2024–25 season (except for 3P%, FT%, and 3PA).\nI created a function to automatically collect box score stats (via Basketball Reference) from the top college players in the 2025 draft class. The most basic stats collected are points, assists, and total rebounds. Offensive rebounds, blocks, and steals are grouped into an applied athleticism category. 3P%, FT%, and 3PA form the shooting category. The age rating reflects how many seasons the player has played, with some seniors receiving a 3.5 instead of a 4 if they are still younger than 23.\nOnce the data is collected, the methodology is as follows:\n\nStandardize each stat column across all players in the dataset.\nAdd up each player’s standardized columns to get a raw total.\nScale the raw total to make all values positive and to better separate player ratings (many players end up in similar ranges, so this adds some distinction).\nAdjust the score based on the age rating to penalize older players who’ve had more years to develop consistency."
  },
  {
    "objectID": "projects/draft_model/draft_model_2025_writeup.html#results",
    "href": "projects/draft_model/draft_model_2025_writeup.html#results",
    "title": "2025 NBA Draft College Prospect Rating",
    "section": "Results",
    "text": "Results\n\nRankings With Age Factored In\n\nimport pandas as pd\n\ndf = pd.read_csv('adjusted_total_df.csv')\ndf = df[['Player', 'Position', 'Net Raw Total', 'Adjusted Total']]\n\n\nprint(df[['Player', 'Adjusted Total']].to_string(index=False))\n\n                  Player  Adjusted Total\n            Cooper Flagg       17.274821\n            VJ Edgecombe       10.887321\n            Dylan Harper       10.132889\n          Airious Bailey        9.621652\n              Asa Newell        8.367489\n     Kasparas Jakucionis        8.361673\n             Tre Johnson        8.220013\n             Derik Queen        8.052597\n            Kon Knueppel        7.593112\n           Thomas Sorber        7.247848\n          Jeremiah Fears        6.561170\n           Liam McNeeley        4.785702\n         Jase Richardson        4.708766\n              Egor Demin        4.502301\n              Will Riley        3.942914\n          Khaman Maluach        3.353220\n            Johni Broome        3.261277\n          Maxime Raynaud        3.186654\n         Rasheer Fleming        3.112991\n                 RJ Luis        3.081105\n           Carter Bryant        2.973006\n    Collin Murray-Boyles        2.896237\n              Danny Wolf        2.849505\n            Drake Powell        2.033211\n               Kam Jones        1.929086\n        Walter ClaytonJr        1.871077\n             Adou Thiero        1.664947\n           Ryan Nembhard        1.618099\n          Nique Clifford        1.608811\nYanic Konan-Niederhauser        1.559460\n          Tyrese Proctor        1.129453\n           Jamir Watkins        1.035523\n           Hunter Sallis        1.010934\n              Mark Sears        1.004819\n        Ryan Kalkbrenner        0.922220\n             Micah Peavy        0.886282\n             Tamar Bates        0.807163\n          Brice Williams        0.790586\n             Jalon Moore        0.770598\n            Kobe Sanders        0.729278\n              Eric Dixon        0.725916\n          Amari Williams        0.520390\n             Chaz Lanier        0.514335\n              Sion James        0.455880\n               Koby Brea        0.413933\n           Cedric Coward        0.365627\n         Jaxson Robinson        0.206957\n\n\n\n\nRankings Without Age Factored In\n\nprint(df[['Player', 'Net Raw Total']].sort_values(by='Net Raw Total', ascending=False).to_string(index=False))\n\n                  Player  Net Raw Total\n            Cooper Flagg      17.274821\n            Johni Broome      16.022653\n          Maxime Raynaud      12.007629\n            VJ Edgecombe      10.887321\n            Dylan Harper      10.132889\n          Airious Bailey       9.621652\n               Kam Jones       9.477601\n         Rasheer Fleming       8.996544\n                 RJ Luis       8.904392\n              Asa Newell       8.367489\n     Kasparas Jakucionis       8.361673\n              Danny Wolf       8.235070\n             Tre Johnson       8.220013\n             Derik Queen       8.052597\n          Nique Clifford       7.904091\n            Kon Knueppel       7.593112\n           Thomas Sorber       7.247848\n        Walter ClaytonJr       7.050403\n          Jeremiah Fears       6.561170\n           Ryan Nembhard       6.097156\n           Jamir Watkins       5.087523\n              Mark Sears       4.936676\n    Collin Murray-Boyles       4.923602\n             Adou Thiero       4.811698\n           Liam McNeeley       4.785702\n         Jase Richardson       4.708766\n        Ryan Kalkbrenner       4.530867\nYanic Konan-Niederhauser       4.506839\n              Egor Demin       4.502301\n             Micah Peavy       4.354304\n              Will Riley       3.942914\n          Brice Williams       3.884148\n           Hunter Sallis       3.809300\n            Kobe Sanders       3.582945\n              Eric Dixon       3.566428\n          Khaman Maluach       3.353220\n          Tyrese Proctor       3.264119\n             Tamar Bates       3.041471\n           Carter Bryant       2.973006\n             Jalon Moore       2.903690\n          Amari Williams       2.556674\n             Chaz Lanier       2.526929\n              Sion James       2.239739\n               Koby Brea       2.033651\n            Drake Powell       2.033211\n           Cedric Coward       1.056662\n         Jaxson Robinson       0.779835"
  },
  {
    "objectID": "projects/draft_model/draft_model_2025_writeup.html#next-steps",
    "href": "projects/draft_model/draft_model_2025_writeup.html#next-steps",
    "title": "2025 NBA Draft College Prospect Rating",
    "section": "Next Steps:",
    "text": "Next Steps:\n\nAdd in international players. International players are more difficult to rate, often due to confusion over how good leagues are, or a lack of minutes played in the good leagues. I have treated them the same as college players in the past, but with my new method of automatically collecting the data, I have yet to expand it to include international players.\nChange the stats to a per 40 minutes basis to account for players who play varying minutes.\nApply the process to specific position groups."
  },
  {
    "objectID": "projects/draft_model/draft_model_2025_writeup.html#code",
    "href": "projects/draft_model/draft_model_2025_writeup.html#code",
    "title": "2025 NBA Draft College Prospect Rating",
    "section": "Code",
    "text": "Code\nCode can be found at this link."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Found here."
  },
  {
    "objectID": "projects.html#nba-draft-prospect-rating",
    "href": "projects.html#nba-draft-prospect-rating",
    "title": "Projects",
    "section": "",
    "text": "Found here."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Home\nI recently created this site as a place to publish some of my personal basketball analytics projects. Throughout the summer/offseason, I will be focusing on producing more content to share. My goal is to have a wide variety of projects here, such as quick explorations of trends, film breakdowns, coaching analytics, or front office models. This site will always be a work in progress, there is always more to explore, and I feel like no projects are ever truly complete. So, if you’re here, check back in for updates!\nThe structure of the site consists of the following:\n\nQuick Hitters: Explorations of trends, stats, or other things I found interesting and wanted to take a look at. They might lead to deeper dives, or they might just be a quick look.\nProjects: These are the projects that tend to have a little bit more thought behind them.\nGeorgetown Internal Site: I’m working on creating an internal analytics website for Georgetown basketball. If the link does not work for you, it is probably good thing, as access is limited."
  }
]